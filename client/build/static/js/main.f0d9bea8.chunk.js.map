{"version":3,"sources":["components/dashboard/Body.js","utils/setAuthToken.js","actions/authActions.js","actions/types.js","reducers/authReducer.js","reducers/errorReducer.js","reducers/index.js","store.js","components/layout/Navbar.js","components/layout/Landing.js","components/auth/Register.js","components/auth/Login.js","components/private-route/PrivateRoute.js","components/dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Body","props","useState","gamesSpreads","setGamesSpreads","gamesTotals","setGamesTotals","home_team","away_team","site","bet_type","my_odds","amount","setBet","style","textDecoration","setLeagues","api_key","process","argv","sport_key","region","useEffect","Axios","get","params","then","response","data","console","log","catch","error","JSON","stringify","headers","handleSubmit","bet","post","res","navigate","className","href","data-toggle","id","map","game","idx","key","sport_nice","teams","sites","ga","index","site_nice","odds","totals","points","onSubmit","type","name","value","onChange","e","target","spreads","setAuthToken","token","axios","defaults","common","setCurrentUser","decoded","payload","logoutUser","dispatch","localStorage","removeItem","isEmpty","require","initialState","isAuthenticated","user","loading","combineReducers","auth","state","action","errors","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","Navbar","Component","Landing","to","Register","setState","preventDefault","newUser","email","password","password2","registerUser","history","this","push","nextProps","noValidate","classnames","invalid","htmlFor","paddingLeft","connect","userData","err","withRouter","Login","loginUser","emailnotfound","passwordincorrect","setItem","jwt_decode","component","rest","render","Dashboard","onLogoutClick","split","onClick","jwtToken","currentTime","Date","now","exp","window","location","App","exact","path","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f0d9bea8.chunk.js","sourcesContent":["import React,{useState, useEffect} from 'react';\r\nimport Axios from 'axios';\r\nimport {navigate} from '@reach/router'\r\n\r\n\r\nconst Body = (props) => {\r\n\r\n\r\n    const [gamesSpreads, setGamesSpreads] = useState([]);\r\n    const [gamesTotals, setGamesTotals] = useState([]);\r\n\r\n    const [bet, setBet] = useState({\r\n        home_team:\"\",\r\n        away_team:\"\",\r\n        site:\"\",\r\n        bet_type:\"\",\r\n        my_odds:\"\",\r\n        amount:0\r\n    });\r\n\r\n    const style = {\r\n        textDecoration: \"underline\"\r\n    }\r\n\r\n\r\n    const [leagues, setLeagues] = useState([]);\r\n\r\n    const api_key = process.argv[2] || '499344a1d48ef3f0d979032257a824c4'\r\n    const [sport_key, setSports_Key] = useState('upcoming'); // use the sport_key from the /sports endpoint below, or use 'upcoming' to see the next 8 games across all sports\r\n    const [region, setRegion] = useState('us'); // uk | us | eu | au\r\n    // const [market, setMarket] = useState('spreads'); // h2h | spreads | totals\r\n\r\n    /*\r\n        First get a list of in-season sports \r\n        the sport 'key' from the response can be used to get odds in the next request\r\n    */\r\n    useEffect(() => {\r\n        Axios.get('https://api.the-odds-api.com/v3/sports', {\r\n            params: {\r\n                api_key: api_key\r\n            }\r\n        })\r\n            .then(response => {\r\n                setLeagues(response.data.data)\r\n            })\r\n            .then(response => {\r\n                console.log(response.data.data)\r\n            })\r\n            .catch(error => {\r\n                // console.log('Error status', error.response.status)\r\n                console.log(\"this sucks 1\")\r\n            })\r\n    }, [] )\r\n\r\n    /*\r\n        Now get a list of live & upcoming games for the sport you want, along with odds for different bookmakers\r\n    */\r\n    useEffect(() => {\r\n        Axios.get(`https://api.the-odds-api.com/v3/odds/?apiKey=${api_key}&sport=${sport_key}&region=${region}&mkt=spreads`)\r\n            .then(response => {\r\n                setGamesSpreads(response.data.data)\r\n            })\r\n            .then(response => {\r\n                // response.data.data contains a list of live and \r\n                // upcoming events and odds for different bookmakers.\r\n                // Events are ordered by start time (live events are first)\r\n                console.log(JSON.stringify(response.data.data))\r\n\r\n                // Check your usage\r\n                console.log('Remaining requests',response.headers['x-requests-remaining'])\r\n                console.log('Used requests',response.headers['x-requests-used'])\r\n            })\r\n            .catch(error => {\r\n                // console.log('Error status', error.response.status)\r\n                console.log('this sucks 2')\r\n            })\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        Axios.get(`https://api.the-odds-api.com/v3/odds/?apiKey=${api_key}&sport=${sport_key}&region=${region}&mkt=totals`)\r\n            .then(response => {\r\n                setGamesTotals(response.data.data)\r\n            })\r\n            .then(response => {\r\n                // response.data.data contains a list of live and \r\n                // upcoming events and odds for different bookmakers.\r\n                // Events are ordered by start time (live events are first)\r\n                console.log(JSON.stringify(response.data.data))\r\n\r\n                // Check your usage\r\n                console.log('Remaining requests',response.headers['x-requests-remaining'])\r\n                console.log('Used requests',response.headers['x-requests-used'])\r\n            })\r\n            .catch(error => {\r\n                // console.log('Error status', error.response.status)\r\n                console.log('this sucks 2')\r\n            })\r\n    },[])\r\n\r\n\r\n    const handleSubmit = bet => {\r\n        Axios.post('http://localhost:8000/api/bet')\r\n            .then(res => console.log(res))\r\n            .catch(navigate('/dashboard'))\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div >\r\n                <br/>\r\n                <h2 className=\"text-center\">TODAYS GAMES</h2>\r\n                <br/>\r\n            </div>\r\n\r\n            <ul  className=\"nav nav-tabs\">\r\n                {/* <li className=\"nav-item active\">\r\n                    <a className=\"btn btn-primary nav-link\" href=\"#1a\" data-toggle=\"tab\">Head To Head</a>\r\n                </li> */}\r\n                <li>\r\n                    <a className=\"btn btn-info nav-link\" href=\"#2a\" data-toggle=\"tab\">Totals</a>\r\n                </li>\r\n                <li>\r\n                    <a className=\"btn btn-primary nav-link\" href=\"#3a\" data-toggle=\"tab\">Spreads</a>\r\n                </li>\r\n\t\t    </ul>\r\n\r\n\t\t\t<div className=\"tab-content clearfix\">\r\n\t            {/* <div className=\"tab-pane active\" id=\"1a\">\r\n                    <h3>hjfhgfhgfhgfhgfhgfhgfhgfhgf</h3>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t\t\t</div> */}\r\n\t\t\t\t<div className=\"tab-pane active\" id=\"2a\">\r\n                    <div >\r\n                        <h3 className=\"text-center\">TOTALS</h3>\r\n                    </div>\r\n                    {\r\n                        gamesTotals.map((game, idx) => {\r\n                            return(\r\n                                <div key={idx} className='card col-8 mx-auto'>\r\n                                    <p><b>LEAGUE:</b> {game.sport_nice}</p>\r\n                                    <h5>{game.teams[0]} vs. {game.teams[1]}</h5>\r\n                                    <p>Home Team: {game.home_team}</p>\r\n                                    <ul className=\"list-inline\">\r\n                                    {\r\n                                        game.sites.map((ga, index) => {\r\n                                            return(\r\n                                                <div>\r\n                                                    <div className=\"card p-3 mb-2\">\r\n                                                        <li className=\"list-inline-item\" key={index}><h6>{ga.site_nice}</h6></li>\r\n                                                        <p style={style}>Under/Over: {ga.odds.totals.points[0]}</p>\r\n\r\n                                                        <form  onSubmit={handleSubmit}>\r\n                                                            <label>Bet</label>\r\n\r\n                                                            <input type=\"hidden\" name=\"home_team\" value={game.teams[0]} />\r\n                                                            <input type=\"hidden\" name=\"away_team\" value={game.teams[1]} />\r\n                                                            <input type=\"hidden\" name=\"site\" value={ga.site_nice} />\r\n                                                            <input type=\"hidden\" name=\"bet_type\" value=\"Spread\" />\r\n                                                            <input type=\"hidden\" name=\"my_odds\" value={ga.odds.totals.points[0]} />\r\n\r\n                                                            <input type=\"number\" name=\"amount\" onChange={(e) => setBet(e.target.value)}/>\r\n\r\n                                                            <input className=\"btn btn-success\" type=\"submit\" value=\"MAKE BET!\" />\r\n                                                        </form>\r\n                                                    </div>\r\n                                                </div>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                    </ul>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n\t\t\t\t</div>\r\n\r\n\r\n                <div className=\"tab-pane\" id=\"3a\">\r\n                    <div >\r\n                        <h3 className=\"text-center\">SPREADS</h3>\r\n                    </div>\r\n                    {\r\n                        gamesSpreads.map((game, idx) => {\r\n                            return(\r\n                                <div key={idx} className='card col-8 mx-auto'>\r\n                                    <p><b>LEAGUE:</b> {game.sport_nice}</p>\r\n                                    <h5>{game.teams[0]} vs. {game.teams[1]}</h5>\r\n                                    <p>Home Team: {game.home_team}</p>\r\n                                    <ul className=\"list-inline\">\r\n                                    {\r\n                                        game.sites.map((ga, index) => {\r\n                                            return(\r\n                                                <div>\r\n                                                    <div className=\"card p-3 mb-2\">\r\n                                                        <li className=\"list-inline-item\" key={index}><h6>{ga.site_nice}</h6></li>\r\n                                                        <p style={style}>Spreads</p>\r\n                                                        <p>{game.teams[0]}: {ga.odds.spreads.points[0]}</p>\r\n                                                        <form  onSubmit={handleSubmit}>\r\n                                                            <label>Bet</label>\r\n\r\n                                                            <input type=\"hidden\" name=\"home_team\" value={game.teams[0]} />\r\n                                                            <input type=\"hidden\" name=\"away_team\" value={game.teams[1]} />\r\n                                                            <input type=\"hidden\" name=\"site\" value={ga.site_nice} />\r\n                                                            <input type=\"hidden\" name=\"bet_type\" value=\"Spread\" />\r\n                                                            <input type=\"hidden\" name=\"my_odds\" value={ga.odds.spreads.points[0]} />\r\n\r\n                                                            <input type=\"number\" name=\"amount\" onChange={(e) => setBet(e.target.value)}/>\r\n\r\n                                                            <input className=\"btn btn-success\" type=\"submit\" value=\"MAKE BET!\" />\r\n                                                        </form>\r\n                                                        <hr/>\r\n                                                        <p>{game.teams[1]}: {ga.odds.spreads.points[1]}</p>\r\n                                                        <form onSubmit={handleSubmit}>\r\n                                                            <label>Bet</label>\r\n\r\n                                                            <input type=\"hidden\" name=\"home_team\" value={game.teams[0]} />\r\n                                                            <input type=\"hidden\" name=\"away_team\" value={game.teams[1]} />\r\n                                                            <input type=\"hidden\" name=\"site\" value={ga.site_nice} />\r\n                                                            <input type=\"hidden\" name=\"bet_type\" value=\"Spread\" />\r\n                                                            <input type=\"hidden\" name=\"my_odds\" value={ga.odds.spreads.points[1]} />\r\n\r\n                                                            <input type=\"number\" name=\"amount\" onChange={(e) => setBet(e.target.value)}/>\r\n\r\n                                                            <input className=\"btn btn-success\" type=\"submit\" value=\"MAKE BET!\" />\r\n                                                        </form>\r\n                                                    </div>\r\n                                                </div>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                    </ul>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Body;","import axios from \"axios\";\r\nconst setAuthToken = token => {\r\n  if (token) {\r\n    // Apply authorization token to every request if logged in\r\n    axios.defaults.headers.common[\"Authorization\"] = token;\r\n  } else {\r\n    // Delete auth header\r\n    delete axios.defaults.headers.common[\"Authorization\"];\r\n  }\r\n};\r\nexport default setAuthToken;","import axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport {\r\n  GET_ERRORS,\r\n  SET_CURRENT_USER,\r\n  USER_LOADING\r\n} from \"./types\";\r\n// Register User\r\nexport const registerUser = (userData, history) => dispatch => {\r\n  axios\r\n    .post(\"/api/users/register\", userData)\r\n    .then(res => history.push(\"/login\")) // re-direct to login on successful register\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n// Login - get user token\r\nexport const loginUser = userData => dispatch => {\r\n  axios\r\n    .post(\"/api/users/login\", userData)\r\n    .then(res => {\r\n      // Save to localStorage\r\n// Set token to localStorage\r\n      const { token } = res.data;\r\n      localStorage.setItem(\"jwtToken\", token);\r\n      // Set token to Auth header\r\n      setAuthToken(token);\r\n      // Decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      // Set current user\r\n      dispatch(setCurrentUser(decoded));\r\n    })\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n// Set logged in user\r\nexport const setCurrentUser = decoded => {\r\n  return {\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded\r\n  };\r\n};\r\n// User loading\r\nexport const setUserLoading = () => {\r\n  return {\r\n    type: USER_LOADING\r\n  };\r\n};\r\n// Log user out\r\nexport const logoutUser = () => dispatch => {\r\n  // Remove token from local storage\r\n  localStorage.removeItem(\"jwtToken\");\r\n  // Remove auth header for future requests\r\n  setAuthToken(false);\r\n  // Set current user to empty object {} which will set isAuthenticated to false\r\n  dispatch(setCurrentUser({}));\r\n};","export const GET_ERRORS = \"GET_ERRORS\";\r\nexport const USER_LOADING = \"USER_LOADING\";\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";","import {\r\n    SET_CURRENT_USER,\r\n    USER_LOADING\r\n  } from \"../actions/types\";\r\n  const isEmpty = require(\"is-empty\");\r\n  const initialState = {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    loading: false\r\n  };\r\n  export default function(state = initialState, action) {\r\n    switch (action.type) {\r\n      case SET_CURRENT_USER:\r\n        return {\r\n          ...state,\r\n          isAuthenticated: !isEmpty(action.payload),\r\n          user: action.payload\r\n        };\r\n      case USER_LOADING:\r\n        return {\r\n          ...state,\r\n          loading: true\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  }","import { GET_ERRORS } from \"../actions/types\";\r\nconst initialState = {};\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_ERRORS:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers } from \"redux\";\r\nimport authReducer from \"./authReducer\";\r\nimport errorReducer from \"./errorReducer\";\r\nexport default combineReducers({\r\n  auth: authReducer,\r\n  errors: errorReducer\r\n});","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middleware)\r\n  )\r\n);\r\nexport default store;","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"mx-auto\">\r\n          <h1>SPORTSBOOK</h1>\r\n          <hr/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Navbar;","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nclass Landing extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-8 mx-auto\">\r\n            <h4>Welcome to SportsBook</h4>\r\n            <p>A great place to make your bets </p>\r\n            <br />\r\n            <div className=\"col s6\">\r\n              <Link to=\"/register\" className=\"btn btn-primary\">Register</Link>\r\n            </div>\r\n            <div className=\"col s6\">\r\n              <Link to=\"/login\" className=\"btn btn-success\">Log In</Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Landing;","import React, { Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { registerUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\n\r\nclass Register extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      password2: \"\",\r\n      errors: {}\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // If logged in and user navigates to Register page, should redirect them to dashboard\r\n    if (this.props.auth.isAuthenticated) {\r\n      this.props.history.push(\"/dashboard\");\r\n    }\r\n  }\r\n\r\ncomponentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors\r\n      });\r\n    }\r\n  }\r\nonChange = e => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\nonSubmit = e => {\r\n    e.preventDefault();\r\nconst newUser = {\r\n      name: this.state.name,\r\n      email: this.state.email,\r\n      password: this.state.password,\r\n      password2: this.state.password2\r\n    };\r\nthis.props.registerUser(newUser, this.props.history); \r\n  };\r\nrender() {\r\n    const { errors } = this.state;\r\nreturn (\r\n      <div>\r\n        <div>\r\n          <div className=\"col-8\">\r\n            <Link to=\"/\" className=\"btn btn-secondary\">Back to home</Link>\r\n            <br/>\r\n            <br/>\r\n            <div className=\"col-8\">\r\n              <h4>Register</h4>\r\n              <p>Already have an account? <Link to=\"/login\">Log in</Link></p>\r\n            </div>\r\n\r\n            <form noValidate onSubmit={this.onSubmit}>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.name}\r\n                  error={errors.name}\r\n                  id=\"name\"\r\n                  type=\"text\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.name\r\n                  })}\r\n                />\r\n                <label htmlFor=\"name\">Name</label>\r\n                <span className=\"red-text\">{errors.name}</span>\r\n              </div>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.email}\r\n                  error={errors.email}\r\n                  id=\"email\"\r\n                  type=\"email\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.email\r\n                  })}\r\n                />\r\n                <label htmlFor=\"email\">Email</label>\r\n                <span className=\"red-text\">{errors.email}</span>\r\n              </div>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.password}\r\n                  error={errors.password}\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.password\r\n                  })}\r\n                />\r\n                <label htmlFor=\"password\">Password</label>\r\n                <span className=\"red-text\">{errors.password}</span>\r\n              </div>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.password2}\r\n                  error={errors.password2}\r\n                  id=\"password2\"\r\n                  type=\"password\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.password2\r\n                  })}\r\n                />\r\n                <label htmlFor=\"password2\">Confirm Password</label>\r\n                <span className=\"red-text\">{errors.password2}</span>\r\n              </div>\r\n              <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n                <button type=\"submit\" className=\"btn btn-primary\" >Sign up</button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nRegister.propTypes = {\r\n  registerUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  errors: state.errors\r\n});\r\nexport default connect(\r\n  mapStateToProps,\r\n  { registerUser }\r\n)(withRouter(Register));\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\n\r\nclass Login extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      errors: {}\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // If logged in and user navigates to Login page, should redirect them to dashboard\r\n    if (this.props.auth.isAuthenticated) {\r\n      this.props.history.push(\"/dashboard\");\r\n    }\r\n  }\r\n  \r\n  componentWillReceiveProps(nextProps) {\r\n      if (nextProps.auth.isAuthenticated) {\r\n        this.props.history.push(\"/dashboard\"); // push user to dashboard when they login\r\n      }\r\n  if (nextProps.errors) {\r\n        this.setState({\r\n          errors: nextProps.errors\r\n        });\r\n      }\r\n    }\r\n  onChange = e => {\r\n      this.setState({ [e.target.id]: e.target.value });\r\n    };\r\n  onSubmit = e => {\r\n      e.preventDefault();\r\n  const userData = {\r\n        email: this.state.email,\r\n        password: this.state.password\r\n      };\r\n  this.props.loginUser(userData); // since we handle the redirect within our component, we don't need to pass in this.props.history as a parameter\r\n    };\r\n  render() {\r\n    const { errors } = this.state;\r\n    return (\r\n      <div>\r\n        <div>\r\n          <div className=\"col-8\">\r\n            <Link to=\"/\" className=\"btn btn-secondary\">Back to home</Link>\r\n            <br/>\r\n            <br/>\r\n            <div className=\"col-8\">\r\n              <h4>Login</h4>\r\n              <p>Don't have an account? <Link to=\"/register\">Register</Link></p>\r\n            </div>\r\n\r\n            <form noValidate onSubmit={this.onSubmit}>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.email}\r\n                  error={errors.email}\r\n                  id=\"email\"\r\n                  type=\"email\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.email || errors.emailnotfound\r\n                  })}\r\n                />\r\n                <label htmlFor=\"email\">Email</label>\r\n                <span className=\"red-text\">\r\n                  {errors.email}\r\n                  {errors.emailnotfound}\r\n                </span>\r\n              </div>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.password}\r\n                  error={errors.password}\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.password || errors.passwordincorrect\r\n                  })}\r\n                />\r\n                <label htmlFor=\"password\">Password</label>\r\n                <span className=\"red-text\">\r\n                  {errors.password}\r\n                  {errors.passwordincorrect}\r\n                </span>\r\n              </div>\r\n              <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n                <button type=\"submit\" className=\"btn btn-primary\">Login</button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nLogin.propTypes = {\r\n  loginUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  errors: state.errors\r\n});\r\nexport default connect(\r\n  mapStateToProps,\r\n  { loginUser }\r\n)(Login);","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\r\n  <Route\r\n    {...rest}\r\n    render={props =>\r\n      auth.isAuthenticated === true ? (\r\n        <Component {...props} />\r\n      ) : (\r\n        <Redirect to=\"/login\" />\r\n      )\r\n    }\r\n  />\r\n);\r\nPrivateRoute.propTypes = {\r\n  auth: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\nexport default connect(mapStateToProps)(PrivateRoute);","import React, { Component, useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { logoutUser } from \"../../actions/authActions\";\r\nimport Axios from 'axios';\r\nimport Body from './Body';\r\n\r\nclass Dashboard extends Component {\r\n    onLogoutClick = e => {\r\n        e.preventDefault();\r\n        this.props.logoutUser();\r\n    };\r\n\r\n    render() {\r\n        const { user } = this.props.auth;\r\n        \r\n        return (\r\n            \r\n            <div>\r\n                <nav className=\"navbar navbar-light bg-light\">\r\n                    <span className=\"navbar-text\">\r\n                    <h3 className=\"text-body\"><b>Welcome,</b> {user.name.split(\" \")[0]}</h3>\r\n                    </span>  \r\n                    <button onClick={this.onLogoutClick} className=\"btn btn-primary\">Logout</button>\r\n                </nav>\r\n                <div >\r\n                    <Body />\r\n                </div>\r\n            </div> \r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nDashboard.propTypes = {\r\n    logoutUser: PropTypes.func.isRequired,\r\n    auth: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth\r\n});\r\nexport default connect(\r\n    mapStateToProps,\r\n    { logoutUser }\r\n)(Dashboard);","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"./utils/setAuthToken\";\nimport { setCurrentUser, logoutUser } from \"./actions/authActions\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport Navbar from \"./components/layout/Navbar\";\nimport Landing from \"./components/layout/Landing\";\nimport Register from \"./components/auth/Register\";\nimport Login from \"./components/auth/Login\";\nimport PrivateRoute from \"./components/private-route/PrivateRoute\";\nimport Dashboard from \"./components/dashboard/Dashboard\";\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\n\n// Check for token to keep user logged in\nif (localStorage.jwtToken) {\n  // Set auth token header auth\n  const token = localStorage.jwtToken;\n  setAuthToken(token);\n  // Decode token and get user info and exp\n  const decoded = jwt_decode(token);\n  // Set user and isAuthenticated\n  store.dispatch(setCurrentUser(decoded));\n// Check for expired token\n  const currentTime = Date.now() / 1000; // to get in milliseconds\n  if (decoded.exp < currentTime) {\n    // Logout user\n    store.dispatch(logoutUser());\n    // Redirect to login\n    window.location.href = \"./login\";\n  }\n}\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n          <div className=\"container\">\n            <Navbar />\n            <Route exact path=\"/\" component={Landing} />\n            <Route exact path=\"/register\" component={Register} />\n            <Route exact path=\"/login\" component={Login} />\n            <Switch>\n              <PrivateRoute exact path=\"/dashboard\" component={Dashboard} />\n            </Switch>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}